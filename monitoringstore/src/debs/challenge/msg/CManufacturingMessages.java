// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/debs/challenge/msg/CManufacturingMessages.proto

package debs.challenge.msg;

public final class CManufacturingMessages {
  private CManufacturingMessages() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface CDataPointOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
    
    // required fixed64 ts = 1;
    boolean hasTs();
    long getTs();
    
    // required fixed64 index = 2;
    boolean hasIndex();
    long getIndex();
    
    // required fixed32 mf01 = 3;
    boolean hasMf01();
    int getMf01();
    
    // required fixed32 mf02 = 4;
    boolean hasMf02();
    int getMf02();
    
    // required fixed32 mf03 = 5;
    boolean hasMf03();
    int getMf03();
    
    // required fixed32 pc13 = 6;
    boolean hasPc13();
    int getPc13();
    
    // required fixed32 pc14 = 7;
    boolean hasPc14();
    int getPc14();
    
    // required fixed32 pc15 = 8;
    boolean hasPc15();
    int getPc15();
    
    // required uint32 pc25 = 9;
    boolean hasPc25();
    int getPc25();
    
    // required uint32 pc26 = 10;
    boolean hasPc26();
    int getPc26();
    
    // required uint32 pc27 = 11;
    boolean hasPc27();
    int getPc27();
    
    // required uint32 res = 12;
    boolean hasRes();
    int getRes();
    
    // optional bool bm05 = 13;
    boolean hasBm05();
    boolean getBm05();
    
    // optional bool bm06 = 14;
    boolean hasBm06();
    boolean getBm06();
    
    // optional bool bm07 = 15;
    boolean hasBm07();
    boolean getBm07();
    
    // optional bool bm08 = 16;
    boolean hasBm08();
    boolean getBm08();
    
    // optional bool bm09 = 17;
    boolean hasBm09();
    boolean getBm09();
    
    // optional bool bm10 = 18;
    boolean hasBm10();
    boolean getBm10();
    
    // optional bool pp01 = 19;
    boolean hasPp01();
    boolean getPp01();
    
    // optional bool pp02 = 20;
    boolean hasPp02();
    boolean getPp02();
    
    // optional bool pp03 = 21;
    boolean hasPp03();
    boolean getPp03();
    
    // optional bool pp04 = 22;
    boolean hasPp04();
    boolean getPp04();
    
    // optional bool pp05 = 23;
    boolean hasPp05();
    boolean getPp05();
    
    // optional bool pp06 = 24;
    boolean hasPp06();
    boolean getPp06();
    
    // optional bool pp07 = 25;
    boolean hasPp07();
    boolean getPp07();
    
    // optional bool pp08 = 26;
    boolean hasPp08();
    boolean getPp08();
    
    // optional bool pp09 = 27;
    boolean hasPp09();
    boolean getPp09();
    
    // optional bool pp10 = 28;
    boolean hasPp10();
    boolean getPp10();
    
    // optional bool pp11 = 29;
    boolean hasPp11();
    boolean getPp11();
    
    // optional bool pp12 = 30;
    boolean hasPp12();
    boolean getPp12();
    
    // optional bool pp13 = 31;
    boolean hasPp13();
    boolean getPp13();
    
    // optional bool pp14 = 32;
    boolean hasPp14();
    boolean getPp14();
    
    // optional bool pp15 = 33;
    boolean hasPp15();
    boolean getPp15();
    
    // optional bool pp16 = 34;
    boolean hasPp16();
    boolean getPp16();
    
    // optional bool pp17 = 35;
    boolean hasPp17();
    boolean getPp17();
    
    // optional bool pp18 = 36;
    boolean hasPp18();
    boolean getPp18();
    
    // optional bool pp19 = 37;
    boolean hasPp19();
    boolean getPp19();
    
    // optional bool pp20 = 38;
    boolean hasPp20();
    boolean getPp20();
    
    // optional bool pp21 = 39;
    boolean hasPp21();
    boolean getPp21();
    
    // optional bool pp22 = 40;
    boolean hasPp22();
    boolean getPp22();
    
    // optional bool pp23 = 41;
    boolean hasPp23();
    boolean getPp23();
    
    // optional bool pp24 = 42;
    boolean hasPp24();
    boolean getPp24();
    
    // optional bool pp25 = 43;
    boolean hasPp25();
    boolean getPp25();
    
    // optional bool pp26 = 44;
    boolean hasPp26();
    boolean getPp26();
    
    // optional bool pp27 = 45;
    boolean hasPp27();
    boolean getPp27();
    
    // optional bool pp28 = 46;
    boolean hasPp28();
    boolean getPp28();
    
    // optional bool pp29 = 47;
    boolean hasPp29();
    boolean getPp29();
    
    // optional bool pp30 = 48;
    boolean hasPp30();
    boolean getPp30();
    
    // optional bool pp31 = 49;
    boolean hasPp31();
    boolean getPp31();
    
    // optional bool pp32 = 50;
    boolean hasPp32();
    boolean getPp32();
    
    // optional bool pp33 = 51;
    boolean hasPp33();
    boolean getPp33();
    
    // optional bool pp34 = 52;
    boolean hasPp34();
    boolean getPp34();
    
    // optional bool pp35 = 53;
    boolean hasPp35();
    boolean getPp35();
    
    // optional bool pp36 = 54;
    boolean hasPp36();
    boolean getPp36();
    
    // optional bool pc01 = 55;
    boolean hasPc01();
    boolean getPc01();
    
    // optional bool pc02 = 56;
    boolean hasPc02();
    boolean getPc02();
    
    // optional bool pc03 = 57;
    boolean hasPc03();
    boolean getPc03();
    
    // optional bool pc04 = 58;
    boolean hasPc04();
    boolean getPc04();
    
    // optional bool pc05 = 59;
    boolean hasPc05();
    boolean getPc05();
    
    // optional bool pc06 = 60;
    boolean hasPc06();
    boolean getPc06();
    
    // optional bool pc19 = 61;
    boolean hasPc19();
    boolean getPc19();
    
    // optional bool pc20 = 62;
    boolean hasPc20();
    boolean getPc20();
    
    // optional bool pc21 = 63;
    boolean hasPc21();
    boolean getPc21();
    
    // optional bool pc22 = 64;
    boolean hasPc22();
    boolean getPc22();
    
    // optional bool pc23 = 65;
    boolean hasPc23();
    boolean getPc23();
    
    // optional bool pc24 = 66;
    boolean hasPc24();
    boolean getPc24();
  }
  public static final class CDataPoint extends
      com.google.protobuf.GeneratedMessage
      implements CDataPointOrBuilder {
    // Use CDataPoint.newBuilder() to construct.
    private CDataPoint(Builder builder) {
      super(builder);
    }
    private CDataPoint(boolean noInit) {}
    
    private static final CDataPoint defaultInstance;
    public static CDataPoint getDefaultInstance() {
      return defaultInstance;
    }
    
    public CDataPoint getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return debs.challenge.msg.CManufacturingMessages.internal_static_debs_challenge_msg_CDataPoint_descriptor;
    }
    
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return debs.challenge.msg.CManufacturingMessages.internal_static_debs_challenge_msg_CDataPoint_fieldAccessorTable;
    }
    
    private int bitField0_;
    private int bitField1_;
    private int bitField2_;
    // required fixed64 ts = 1;
    public static final int TS_FIELD_NUMBER = 1;
    private long ts_;
    public boolean hasTs() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public long getTs() {
      return ts_;
    }
    
    // required fixed64 index = 2;
    public static final int INDEX_FIELD_NUMBER = 2;
    private long index_;
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public long getIndex() {
      return index_;
    }
    
    // required fixed32 mf01 = 3;
    public static final int MF01_FIELD_NUMBER = 3;
    private int mf01_;
    public boolean hasMf01() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public int getMf01() {
      return mf01_;
    }
    
    // required fixed32 mf02 = 4;
    public static final int MF02_FIELD_NUMBER = 4;
    private int mf02_;
    public boolean hasMf02() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public int getMf02() {
      return mf02_;
    }
    
    // required fixed32 mf03 = 5;
    public static final int MF03_FIELD_NUMBER = 5;
    private int mf03_;
    public boolean hasMf03() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getMf03() {
      return mf03_;
    }
    
    // required fixed32 pc13 = 6;
    public static final int PC13_FIELD_NUMBER = 6;
    private int pc13_;
    public boolean hasPc13() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getPc13() {
      return pc13_;
    }
    
    // required fixed32 pc14 = 7;
    public static final int PC14_FIELD_NUMBER = 7;
    private int pc14_;
    public boolean hasPc14() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getPc14() {
      return pc14_;
    }
    
    // required fixed32 pc15 = 8;
    public static final int PC15_FIELD_NUMBER = 8;
    private int pc15_;
    public boolean hasPc15() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public int getPc15() {
      return pc15_;
    }
    
    // required uint32 pc25 = 9;
    public static final int PC25_FIELD_NUMBER = 9;
    private int pc25_;
    public boolean hasPc25() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    public int getPc25() {
      return pc25_;
    }
    
    // required uint32 pc26 = 10;
    public static final int PC26_FIELD_NUMBER = 10;
    private int pc26_;
    public boolean hasPc26() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    public int getPc26() {
      return pc26_;
    }
    
    // required uint32 pc27 = 11;
    public static final int PC27_FIELD_NUMBER = 11;
    private int pc27_;
    public boolean hasPc27() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    public int getPc27() {
      return pc27_;
    }
    
    // required uint32 res = 12;
    public static final int RES_FIELD_NUMBER = 12;
    private int res_;
    public boolean hasRes() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    public int getRes() {
      return res_;
    }
    
    // optional bool bm05 = 13;
    public static final int BM05_FIELD_NUMBER = 13;
    private boolean bm05_;
    public boolean hasBm05() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    public boolean getBm05() {
      return bm05_;
    }
    
    // optional bool bm06 = 14;
    public static final int BM06_FIELD_NUMBER = 14;
    private boolean bm06_;
    public boolean hasBm06() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    public boolean getBm06() {
      return bm06_;
    }
    
    // optional bool bm07 = 15;
    public static final int BM07_FIELD_NUMBER = 15;
    private boolean bm07_;
    public boolean hasBm07() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    public boolean getBm07() {
      return bm07_;
    }
    
    // optional bool bm08 = 16;
    public static final int BM08_FIELD_NUMBER = 16;
    private boolean bm08_;
    public boolean hasBm08() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    public boolean getBm08() {
      return bm08_;
    }
    
    // optional bool bm09 = 17;
    public static final int BM09_FIELD_NUMBER = 17;
    private boolean bm09_;
    public boolean hasBm09() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    public boolean getBm09() {
      return bm09_;
    }
    
    // optional bool bm10 = 18;
    public static final int BM10_FIELD_NUMBER = 18;
    private boolean bm10_;
    public boolean hasBm10() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    public boolean getBm10() {
      return bm10_;
    }
    
    // optional bool pp01 = 19;
    public static final int PP01_FIELD_NUMBER = 19;
    private boolean pp01_;
    public boolean hasPp01() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    public boolean getPp01() {
      return pp01_;
    }
    
    // optional bool pp02 = 20;
    public static final int PP02_FIELD_NUMBER = 20;
    private boolean pp02_;
    public boolean hasPp02() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    public boolean getPp02() {
      return pp02_;
    }
    
    // optional bool pp03 = 21;
    public static final int PP03_FIELD_NUMBER = 21;
    private boolean pp03_;
    public boolean hasPp03() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    public boolean getPp03() {
      return pp03_;
    }
    
    // optional bool pp04 = 22;
    public static final int PP04_FIELD_NUMBER = 22;
    private boolean pp04_;
    public boolean hasPp04() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    public boolean getPp04() {
      return pp04_;
    }
    
    // optional bool pp05 = 23;
    public static final int PP05_FIELD_NUMBER = 23;
    private boolean pp05_;
    public boolean hasPp05() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    public boolean getPp05() {
      return pp05_;
    }
    
    // optional bool pp06 = 24;
    public static final int PP06_FIELD_NUMBER = 24;
    private boolean pp06_;
    public boolean hasPp06() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    public boolean getPp06() {
      return pp06_;
    }
    
    // optional bool pp07 = 25;
    public static final int PP07_FIELD_NUMBER = 25;
    private boolean pp07_;
    public boolean hasPp07() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    public boolean getPp07() {
      return pp07_;
    }
    
    // optional bool pp08 = 26;
    public static final int PP08_FIELD_NUMBER = 26;
    private boolean pp08_;
    public boolean hasPp08() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    public boolean getPp08() {
      return pp08_;
    }
    
    // optional bool pp09 = 27;
    public static final int PP09_FIELD_NUMBER = 27;
    private boolean pp09_;
    public boolean hasPp09() {
      return ((bitField0_ & 0x04000000) == 0x04000000);
    }
    public boolean getPp09() {
      return pp09_;
    }
    
    // optional bool pp10 = 28;
    public static final int PP10_FIELD_NUMBER = 28;
    private boolean pp10_;
    public boolean hasPp10() {
      return ((bitField0_ & 0x08000000) == 0x08000000);
    }
    public boolean getPp10() {
      return pp10_;
    }
    
    // optional bool pp11 = 29;
    public static final int PP11_FIELD_NUMBER = 29;
    private boolean pp11_;
    public boolean hasPp11() {
      return ((bitField0_ & 0x10000000) == 0x10000000);
    }
    public boolean getPp11() {
      return pp11_;
    }
    
    // optional bool pp12 = 30;
    public static final int PP12_FIELD_NUMBER = 30;
    private boolean pp12_;
    public boolean hasPp12() {
      return ((bitField0_ & 0x20000000) == 0x20000000);
    }
    public boolean getPp12() {
      return pp12_;
    }
    
    // optional bool pp13 = 31;
    public static final int PP13_FIELD_NUMBER = 31;
    private boolean pp13_;
    public boolean hasPp13() {
      return ((bitField0_ & 0x40000000) == 0x40000000);
    }
    public boolean getPp13() {
      return pp13_;
    }
    
    // optional bool pp14 = 32;
    public static final int PP14_FIELD_NUMBER = 32;
    private boolean pp14_;
    public boolean hasPp14() {
      return ((bitField0_ & 0x80000000) == 0x80000000);
    }
    public boolean getPp14() {
      return pp14_;
    }
    
    // optional bool pp15 = 33;
    public static final int PP15_FIELD_NUMBER = 33;
    private boolean pp15_;
    public boolean hasPp15() {
      return ((bitField1_ & 0x00000001) == 0x00000001);
    }
    public boolean getPp15() {
      return pp15_;
    }
    
    // optional bool pp16 = 34;
    public static final int PP16_FIELD_NUMBER = 34;
    private boolean pp16_;
    public boolean hasPp16() {
      return ((bitField1_ & 0x00000002) == 0x00000002);
    }
    public boolean getPp16() {
      return pp16_;
    }
    
    // optional bool pp17 = 35;
    public static final int PP17_FIELD_NUMBER = 35;
    private boolean pp17_;
    public boolean hasPp17() {
      return ((bitField1_ & 0x00000004) == 0x00000004);
    }
    public boolean getPp17() {
      return pp17_;
    }
    
    // optional bool pp18 = 36;
    public static final int PP18_FIELD_NUMBER = 36;
    private boolean pp18_;
    public boolean hasPp18() {
      return ((bitField1_ & 0x00000008) == 0x00000008);
    }
    public boolean getPp18() {
      return pp18_;
    }
    
    // optional bool pp19 = 37;
    public static final int PP19_FIELD_NUMBER = 37;
    private boolean pp19_;
    public boolean hasPp19() {
      return ((bitField1_ & 0x00000010) == 0x00000010);
    }
    public boolean getPp19() {
      return pp19_;
    }
    
    // optional bool pp20 = 38;
    public static final int PP20_FIELD_NUMBER = 38;
    private boolean pp20_;
    public boolean hasPp20() {
      return ((bitField1_ & 0x00000020) == 0x00000020);
    }
    public boolean getPp20() {
      return pp20_;
    }
    
    // optional bool pp21 = 39;
    public static final int PP21_FIELD_NUMBER = 39;
    private boolean pp21_;
    public boolean hasPp21() {
      return ((bitField1_ & 0x00000040) == 0x00000040);
    }
    public boolean getPp21() {
      return pp21_;
    }
    
    // optional bool pp22 = 40;
    public static final int PP22_FIELD_NUMBER = 40;
    private boolean pp22_;
    public boolean hasPp22() {
      return ((bitField1_ & 0x00000080) == 0x00000080);
    }
    public boolean getPp22() {
      return pp22_;
    }
    
    // optional bool pp23 = 41;
    public static final int PP23_FIELD_NUMBER = 41;
    private boolean pp23_;
    public boolean hasPp23() {
      return ((bitField1_ & 0x00000100) == 0x00000100);
    }
    public boolean getPp23() {
      return pp23_;
    }
    
    // optional bool pp24 = 42;
    public static final int PP24_FIELD_NUMBER = 42;
    private boolean pp24_;
    public boolean hasPp24() {
      return ((bitField1_ & 0x00000200) == 0x00000200);
    }
    public boolean getPp24() {
      return pp24_;
    }
    
    // optional bool pp25 = 43;
    public static final int PP25_FIELD_NUMBER = 43;
    private boolean pp25_;
    public boolean hasPp25() {
      return ((bitField1_ & 0x00000400) == 0x00000400);
    }
    public boolean getPp25() {
      return pp25_;
    }
    
    // optional bool pp26 = 44;
    public static final int PP26_FIELD_NUMBER = 44;
    private boolean pp26_;
    public boolean hasPp26() {
      return ((bitField1_ & 0x00000800) == 0x00000800);
    }
    public boolean getPp26() {
      return pp26_;
    }
    
    // optional bool pp27 = 45;
    public static final int PP27_FIELD_NUMBER = 45;
    private boolean pp27_;
    public boolean hasPp27() {
      return ((bitField1_ & 0x00001000) == 0x00001000);
    }
    public boolean getPp27() {
      return pp27_;
    }
    
    // optional bool pp28 = 46;
    public static final int PP28_FIELD_NUMBER = 46;
    private boolean pp28_;
    public boolean hasPp28() {
      return ((bitField1_ & 0x00002000) == 0x00002000);
    }
    public boolean getPp28() {
      return pp28_;
    }
    
    // optional bool pp29 = 47;
    public static final int PP29_FIELD_NUMBER = 47;
    private boolean pp29_;
    public boolean hasPp29() {
      return ((bitField1_ & 0x00004000) == 0x00004000);
    }
    public boolean getPp29() {
      return pp29_;
    }
    
    // optional bool pp30 = 48;
    public static final int PP30_FIELD_NUMBER = 48;
    private boolean pp30_;
    public boolean hasPp30() {
      return ((bitField1_ & 0x00008000) == 0x00008000);
    }
    public boolean getPp30() {
      return pp30_;
    }
    
    // optional bool pp31 = 49;
    public static final int PP31_FIELD_NUMBER = 49;
    private boolean pp31_;
    public boolean hasPp31() {
      return ((bitField1_ & 0x00010000) == 0x00010000);
    }
    public boolean getPp31() {
      return pp31_;
    }
    
    // optional bool pp32 = 50;
    public static final int PP32_FIELD_NUMBER = 50;
    private boolean pp32_;
    public boolean hasPp32() {
      return ((bitField1_ & 0x00020000) == 0x00020000);
    }
    public boolean getPp32() {
      return pp32_;
    }
    
    // optional bool pp33 = 51;
    public static final int PP33_FIELD_NUMBER = 51;
    private boolean pp33_;
    public boolean hasPp33() {
      return ((bitField1_ & 0x00040000) == 0x00040000);
    }
    public boolean getPp33() {
      return pp33_;
    }
    
    // optional bool pp34 = 52;
    public static final int PP34_FIELD_NUMBER = 52;
    private boolean pp34_;
    public boolean hasPp34() {
      return ((bitField1_ & 0x00080000) == 0x00080000);
    }
    public boolean getPp34() {
      return pp34_;
    }
    
    // optional bool pp35 = 53;
    public static final int PP35_FIELD_NUMBER = 53;
    private boolean pp35_;
    public boolean hasPp35() {
      return ((bitField1_ & 0x00100000) == 0x00100000);
    }
    public boolean getPp35() {
      return pp35_;
    }
    
    // optional bool pp36 = 54;
    public static final int PP36_FIELD_NUMBER = 54;
    private boolean pp36_;
    public boolean hasPp36() {
      return ((bitField1_ & 0x00200000) == 0x00200000);
    }
    public boolean getPp36() {
      return pp36_;
    }
    
    // optional bool pc01 = 55;
    public static final int PC01_FIELD_NUMBER = 55;
    private boolean pc01_;
    public boolean hasPc01() {
      return ((bitField1_ & 0x00400000) == 0x00400000);
    }
    public boolean getPc01() {
      return pc01_;
    }
    
    // optional bool pc02 = 56;
    public static final int PC02_FIELD_NUMBER = 56;
    private boolean pc02_;
    public boolean hasPc02() {
      return ((bitField1_ & 0x00800000) == 0x00800000);
    }
    public boolean getPc02() {
      return pc02_;
    }
    
    // optional bool pc03 = 57;
    public static final int PC03_FIELD_NUMBER = 57;
    private boolean pc03_;
    public boolean hasPc03() {
      return ((bitField1_ & 0x01000000) == 0x01000000);
    }
    public boolean getPc03() {
      return pc03_;
    }
    
    // optional bool pc04 = 58;
    public static final int PC04_FIELD_NUMBER = 58;
    private boolean pc04_;
    public boolean hasPc04() {
      return ((bitField1_ & 0x02000000) == 0x02000000);
    }
    public boolean getPc04() {
      return pc04_;
    }
    
    // optional bool pc05 = 59;
    public static final int PC05_FIELD_NUMBER = 59;
    private boolean pc05_;
    public boolean hasPc05() {
      return ((bitField1_ & 0x04000000) == 0x04000000);
    }
    public boolean getPc05() {
      return pc05_;
    }
    
    // optional bool pc06 = 60;
    public static final int PC06_FIELD_NUMBER = 60;
    private boolean pc06_;
    public boolean hasPc06() {
      return ((bitField1_ & 0x08000000) == 0x08000000);
    }
    public boolean getPc06() {
      return pc06_;
    }
    
    // optional bool pc19 = 61;
    public static final int PC19_FIELD_NUMBER = 61;
    private boolean pc19_;
    public boolean hasPc19() {
      return ((bitField1_ & 0x10000000) == 0x10000000);
    }
    public boolean getPc19() {
      return pc19_;
    }
    
    // optional bool pc20 = 62;
    public static final int PC20_FIELD_NUMBER = 62;
    private boolean pc20_;
    public boolean hasPc20() {
      return ((bitField1_ & 0x20000000) == 0x20000000);
    }
    public boolean getPc20() {
      return pc20_;
    }
    
    // optional bool pc21 = 63;
    public static final int PC21_FIELD_NUMBER = 63;
    private boolean pc21_;
    public boolean hasPc21() {
      return ((bitField1_ & 0x40000000) == 0x40000000);
    }
    public boolean getPc21() {
      return pc21_;
    }
    
    // optional bool pc22 = 64;
    public static final int PC22_FIELD_NUMBER = 64;
    private boolean pc22_;
    public boolean hasPc22() {
      return ((bitField1_ & 0x80000000) == 0x80000000);
    }
    public boolean getPc22() {
      return pc22_;
    }
    
    // optional bool pc23 = 65;
    public static final int PC23_FIELD_NUMBER = 65;
    private boolean pc23_;
    public boolean hasPc23() {
      return ((bitField2_ & 0x00000001) == 0x00000001);
    }
    public boolean getPc23() {
      return pc23_;
    }
    
    // optional bool pc24 = 66;
    public static final int PC24_FIELD_NUMBER = 66;
    private boolean pc24_;
    public boolean hasPc24() {
      return ((bitField2_ & 0x00000002) == 0x00000002);
    }
    public boolean getPc24() {
      return pc24_;
    }
    
    private void initFields() {
      ts_ = 0L;
      index_ = 0L;
      mf01_ = 0;
      mf02_ = 0;
      mf03_ = 0;
      pc13_ = 0;
      pc14_ = 0;
      pc15_ = 0;
      pc25_ = 0;
      pc26_ = 0;
      pc27_ = 0;
      res_ = 0;
      bm05_ = false;
      bm06_ = false;
      bm07_ = false;
      bm08_ = false;
      bm09_ = false;
      bm10_ = false;
      pp01_ = false;
      pp02_ = false;
      pp03_ = false;
      pp04_ = false;
      pp05_ = false;
      pp06_ = false;
      pp07_ = false;
      pp08_ = false;
      pp09_ = false;
      pp10_ = false;
      pp11_ = false;
      pp12_ = false;
      pp13_ = false;
      pp14_ = false;
      pp15_ = false;
      pp16_ = false;
      pp17_ = false;
      pp18_ = false;
      pp19_ = false;
      pp20_ = false;
      pp21_ = false;
      pp22_ = false;
      pp23_ = false;
      pp24_ = false;
      pp25_ = false;
      pp26_ = false;
      pp27_ = false;
      pp28_ = false;
      pp29_ = false;
      pp30_ = false;
      pp31_ = false;
      pp32_ = false;
      pp33_ = false;
      pp34_ = false;
      pp35_ = false;
      pp36_ = false;
      pc01_ = false;
      pc02_ = false;
      pc03_ = false;
      pc04_ = false;
      pc05_ = false;
      pc06_ = false;
      pc19_ = false;
      pc20_ = false;
      pc21_ = false;
      pc22_ = false;
      pc23_ = false;
      pc24_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasTs()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMf01()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMf02()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMf03()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc13()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc14()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc15()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc25()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc26()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPc27()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasRes()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeFixed64(1, ts_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFixed64(2, index_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFixed32(3, mf01_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFixed32(4, mf02_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeFixed32(5, mf03_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFixed32(6, pc13_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeFixed32(7, pc14_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFixed32(8, pc15_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeUInt32(9, pc25_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeUInt32(10, pc26_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeUInt32(11, pc27_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeUInt32(12, res_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBool(13, bm05_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBool(14, bm06_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeBool(15, bm07_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeBool(16, bm08_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeBool(17, bm09_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeBool(18, bm10_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(19, pp01_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeBool(20, pp02_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeBool(21, pp03_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeBool(22, pp04_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeBool(23, pp05_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeBool(24, pp06_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeBool(25, pp07_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeBool(26, pp08_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        output.writeBool(27, pp09_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        output.writeBool(28, pp10_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        output.writeBool(29, pp11_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        output.writeBool(30, pp12_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        output.writeBool(31, pp13_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        output.writeBool(32, pp14_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        output.writeBool(33, pp15_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        output.writeBool(34, pp16_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        output.writeBool(35, pp17_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        output.writeBool(36, pp18_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        output.writeBool(37, pp19_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        output.writeBool(38, pp20_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        output.writeBool(39, pp21_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        output.writeBool(40, pp22_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        output.writeBool(41, pp23_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        output.writeBool(42, pp24_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        output.writeBool(43, pp25_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        output.writeBool(44, pp26_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        output.writeBool(45, pp27_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        output.writeBool(46, pp28_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        output.writeBool(47, pp29_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        output.writeBool(48, pp30_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        output.writeBool(49, pp31_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        output.writeBool(50, pp32_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        output.writeBool(51, pp33_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        output.writeBool(52, pp34_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        output.writeBool(53, pp35_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        output.writeBool(54, pp36_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        output.writeBool(55, pc01_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        output.writeBool(56, pc02_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        output.writeBool(57, pc03_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        output.writeBool(58, pc04_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        output.writeBool(59, pc05_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        output.writeBool(60, pc06_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        output.writeBool(61, pc19_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        output.writeBool(62, pc20_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        output.writeBool(63, pc21_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        output.writeBool(64, pc22_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        output.writeBool(65, pc23_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        output.writeBool(66, pc24_);
      }
      getUnknownFields().writeTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(1, ts_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, index_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, mf01_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, mf02_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, mf03_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(6, pc13_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(7, pc14_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(8, pc15_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(9, pc25_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(10, pc26_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(11, pc27_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(12, res_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(13, bm05_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(14, bm06_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(15, bm07_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, bm08_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, bm09_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(18, bm10_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, pp01_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(20, pp02_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(21, pp03_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(22, pp04_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(23, pp05_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(24, pp06_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(25, pp07_);
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(26, pp08_);
      }
      if (((bitField0_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(27, pp09_);
      }
      if (((bitField0_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(28, pp10_);
      }
      if (((bitField0_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(29, pp11_);
      }
      if (((bitField0_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(30, pp12_);
      }
      if (((bitField0_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(31, pp13_);
      }
      if (((bitField0_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(32, pp14_);
      }
      if (((bitField1_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(33, pp15_);
      }
      if (((bitField1_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(34, pp16_);
      }
      if (((bitField1_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(35, pp17_);
      }
      if (((bitField1_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(36, pp18_);
      }
      if (((bitField1_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(37, pp19_);
      }
      if (((bitField1_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(38, pp20_);
      }
      if (((bitField1_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(39, pp21_);
      }
      if (((bitField1_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(40, pp22_);
      }
      if (((bitField1_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(41, pp23_);
      }
      if (((bitField1_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(42, pp24_);
      }
      if (((bitField1_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(43, pp25_);
      }
      if (((bitField1_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(44, pp26_);
      }
      if (((bitField1_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(45, pp27_);
      }
      if (((bitField1_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(46, pp28_);
      }
      if (((bitField1_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(47, pp29_);
      }
      if (((bitField1_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(48, pp30_);
      }
      if (((bitField1_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(49, pp31_);
      }
      if (((bitField1_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(50, pp32_);
      }
      if (((bitField1_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(51, pp33_);
      }
      if (((bitField1_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(52, pp34_);
      }
      if (((bitField1_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(53, pp35_);
      }
      if (((bitField1_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(54, pp36_);
      }
      if (((bitField1_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(55, pc01_);
      }
      if (((bitField1_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(56, pc02_);
      }
      if (((bitField1_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(57, pc03_);
      }
      if (((bitField1_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(58, pc04_);
      }
      if (((bitField1_ & 0x04000000) == 0x04000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(59, pc05_);
      }
      if (((bitField1_ & 0x08000000) == 0x08000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(60, pc06_);
      }
      if (((bitField1_ & 0x10000000) == 0x10000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(61, pc19_);
      }
      if (((bitField1_ & 0x20000000) == 0x20000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(62, pc20_);
      }
      if (((bitField1_ & 0x40000000) == 0x40000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(63, pc21_);
      }
      if (((bitField1_ & 0x80000000) == 0x80000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(64, pc22_);
      }
      if (((bitField2_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(65, pc23_);
      }
      if (((bitField2_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(66, pc24_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static debs.challenge.msg.CManufacturingMessages.CDataPoint parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(debs.challenge.msg.CManufacturingMessages.CDataPoint prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements debs.challenge.msg.CManufacturingMessages.CDataPointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return debs.challenge.msg.CManufacturingMessages.internal_static_debs_challenge_msg_CDataPoint_descriptor;
      }
      
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return debs.challenge.msg.CManufacturingMessages.internal_static_debs_challenge_msg_CDataPoint_fieldAccessorTable;
      }
      
      // Construct using debs.challenge.msg.CManufacturingMessages.CDataPoint.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private Builder(BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        ts_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        mf01_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        mf02_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        mf03_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        pc13_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        pc14_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        pc15_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        pc25_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        pc26_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        pc27_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        res_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        bm05_ = false;
        bitField0_ = (bitField0_ & ~0x00001000);
        bm06_ = false;
        bitField0_ = (bitField0_ & ~0x00002000);
        bm07_ = false;
        bitField0_ = (bitField0_ & ~0x00004000);
        bm08_ = false;
        bitField0_ = (bitField0_ & ~0x00008000);
        bm09_ = false;
        bitField0_ = (bitField0_ & ~0x00010000);
        bm10_ = false;
        bitField0_ = (bitField0_ & ~0x00020000);
        pp01_ = false;
        bitField0_ = (bitField0_ & ~0x00040000);
        pp02_ = false;
        bitField0_ = (bitField0_ & ~0x00080000);
        pp03_ = false;
        bitField0_ = (bitField0_ & ~0x00100000);
        pp04_ = false;
        bitField0_ = (bitField0_ & ~0x00200000);
        pp05_ = false;
        bitField0_ = (bitField0_ & ~0x00400000);
        pp06_ = false;
        bitField0_ = (bitField0_ & ~0x00800000);
        pp07_ = false;
        bitField0_ = (bitField0_ & ~0x01000000);
        pp08_ = false;
        bitField0_ = (bitField0_ & ~0x02000000);
        pp09_ = false;
        bitField0_ = (bitField0_ & ~0x04000000);
        pp10_ = false;
        bitField0_ = (bitField0_ & ~0x08000000);
        pp11_ = false;
        bitField0_ = (bitField0_ & ~0x10000000);
        pp12_ = false;
        bitField0_ = (bitField0_ & ~0x20000000);
        pp13_ = false;
        bitField0_ = (bitField0_ & ~0x40000000);
        pp14_ = false;
        bitField0_ = (bitField0_ & ~0x80000000);
        pp15_ = false;
        bitField1_ = (bitField1_ & ~0x00000001);
        pp16_ = false;
        bitField1_ = (bitField1_ & ~0x00000002);
        pp17_ = false;
        bitField1_ = (bitField1_ & ~0x00000004);
        pp18_ = false;
        bitField1_ = (bitField1_ & ~0x00000008);
        pp19_ = false;
        bitField1_ = (bitField1_ & ~0x00000010);
        pp20_ = false;
        bitField1_ = (bitField1_ & ~0x00000020);
        pp21_ = false;
        bitField1_ = (bitField1_ & ~0x00000040);
        pp22_ = false;
        bitField1_ = (bitField1_ & ~0x00000080);
        pp23_ = false;
        bitField1_ = (bitField1_ & ~0x00000100);
        pp24_ = false;
        bitField1_ = (bitField1_ & ~0x00000200);
        pp25_ = false;
        bitField1_ = (bitField1_ & ~0x00000400);
        pp26_ = false;
        bitField1_ = (bitField1_ & ~0x00000800);
        pp27_ = false;
        bitField1_ = (bitField1_ & ~0x00001000);
        pp28_ = false;
        bitField1_ = (bitField1_ & ~0x00002000);
        pp29_ = false;
        bitField1_ = (bitField1_ & ~0x00004000);
        pp30_ = false;
        bitField1_ = (bitField1_ & ~0x00008000);
        pp31_ = false;
        bitField1_ = (bitField1_ & ~0x00010000);
        pp32_ = false;
        bitField1_ = (bitField1_ & ~0x00020000);
        pp33_ = false;
        bitField1_ = (bitField1_ & ~0x00040000);
        pp34_ = false;
        bitField1_ = (bitField1_ & ~0x00080000);
        pp35_ = false;
        bitField1_ = (bitField1_ & ~0x00100000);
        pp36_ = false;
        bitField1_ = (bitField1_ & ~0x00200000);
        pc01_ = false;
        bitField1_ = (bitField1_ & ~0x00400000);
        pc02_ = false;
        bitField1_ = (bitField1_ & ~0x00800000);
        pc03_ = false;
        bitField1_ = (bitField1_ & ~0x01000000);
        pc04_ = false;
        bitField1_ = (bitField1_ & ~0x02000000);
        pc05_ = false;
        bitField1_ = (bitField1_ & ~0x04000000);
        pc06_ = false;
        bitField1_ = (bitField1_ & ~0x08000000);
        pc19_ = false;
        bitField1_ = (bitField1_ & ~0x10000000);
        pc20_ = false;
        bitField1_ = (bitField1_ & ~0x20000000);
        pc21_ = false;
        bitField1_ = (bitField1_ & ~0x40000000);
        pc22_ = false;
        bitField1_ = (bitField1_ & ~0x80000000);
        pc23_ = false;
        bitField2_ = (bitField2_ & ~0x00000001);
        pc24_ = false;
        bitField2_ = (bitField2_ & ~0x00000002);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return debs.challenge.msg.CManufacturingMessages.CDataPoint.getDescriptor();
      }
      
      public debs.challenge.msg.CManufacturingMessages.CDataPoint getDefaultInstanceForType() {
        return debs.challenge.msg.CManufacturingMessages.CDataPoint.getDefaultInstance();
      }
      
      public debs.challenge.msg.CManufacturingMessages.CDataPoint build() {
        debs.challenge.msg.CManufacturingMessages.CDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private debs.challenge.msg.CManufacturingMessages.CDataPoint buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        debs.challenge.msg.CManufacturingMessages.CDataPoint result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public debs.challenge.msg.CManufacturingMessages.CDataPoint buildPartial() {
        debs.challenge.msg.CManufacturingMessages.CDataPoint result = new debs.challenge.msg.CManufacturingMessages.CDataPoint(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int from_bitField2_ = bitField2_;
        int to_bitField0_ = 0;
        int to_bitField1_ = 0;
        int to_bitField2_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.ts_ = ts_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.mf01_ = mf01_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.mf02_ = mf02_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.mf03_ = mf03_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pc13_ = pc13_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.pc14_ = pc14_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.pc15_ = pc15_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.pc25_ = pc25_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.pc26_ = pc26_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.pc27_ = pc27_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.res_ = res_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.bm05_ = bm05_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.bm06_ = bm06_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.bm07_ = bm07_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.bm08_ = bm08_;
        if (((from_bitField0_ & 0x00010000) == 0x00010000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.bm09_ = bm09_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.bm10_ = bm10_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.pp01_ = pp01_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.pp02_ = pp02_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.pp03_ = pp03_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.pp04_ = pp04_;
        if (((from_bitField0_ & 0x00400000) == 0x00400000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.pp05_ = pp05_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.pp06_ = pp06_;
        if (((from_bitField0_ & 0x01000000) == 0x01000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.pp07_ = pp07_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x02000000;
        }
        result.pp08_ = pp08_;
        if (((from_bitField0_ & 0x04000000) == 0x04000000)) {
          to_bitField0_ |= 0x04000000;
        }
        result.pp09_ = pp09_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x08000000;
        }
        result.pp10_ = pp10_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x10000000;
        }
        result.pp11_ = pp11_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x20000000;
        }
        result.pp12_ = pp12_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x40000000;
        }
        result.pp13_ = pp13_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x80000000;
        }
        result.pp14_ = pp14_;
        if (((from_bitField1_ & 0x00000001) == 0x00000001)) {
          to_bitField1_ |= 0x00000001;
        }
        result.pp15_ = pp15_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField1_ |= 0x00000002;
        }
        result.pp16_ = pp16_;
        if (((from_bitField1_ & 0x00000004) == 0x00000004)) {
          to_bitField1_ |= 0x00000004;
        }
        result.pp17_ = pp17_;
        if (((from_bitField1_ & 0x00000008) == 0x00000008)) {
          to_bitField1_ |= 0x00000008;
        }
        result.pp18_ = pp18_;
        if (((from_bitField1_ & 0x00000010) == 0x00000010)) {
          to_bitField1_ |= 0x00000010;
        }
        result.pp19_ = pp19_;
        if (((from_bitField1_ & 0x00000020) == 0x00000020)) {
          to_bitField1_ |= 0x00000020;
        }
        result.pp20_ = pp20_;
        if (((from_bitField1_ & 0x00000040) == 0x00000040)) {
          to_bitField1_ |= 0x00000040;
        }
        result.pp21_ = pp21_;
        if (((from_bitField1_ & 0x00000080) == 0x00000080)) {
          to_bitField1_ |= 0x00000080;
        }
        result.pp22_ = pp22_;
        if (((from_bitField1_ & 0x00000100) == 0x00000100)) {
          to_bitField1_ |= 0x00000100;
        }
        result.pp23_ = pp23_;
        if (((from_bitField1_ & 0x00000200) == 0x00000200)) {
          to_bitField1_ |= 0x00000200;
        }
        result.pp24_ = pp24_;
        if (((from_bitField1_ & 0x00000400) == 0x00000400)) {
          to_bitField1_ |= 0x00000400;
        }
        result.pp25_ = pp25_;
        if (((from_bitField1_ & 0x00000800) == 0x00000800)) {
          to_bitField1_ |= 0x00000800;
        }
        result.pp26_ = pp26_;
        if (((from_bitField1_ & 0x00001000) == 0x00001000)) {
          to_bitField1_ |= 0x00001000;
        }
        result.pp27_ = pp27_;
        if (((from_bitField1_ & 0x00002000) == 0x00002000)) {
          to_bitField1_ |= 0x00002000;
        }
        result.pp28_ = pp28_;
        if (((from_bitField1_ & 0x00004000) == 0x00004000)) {
          to_bitField1_ |= 0x00004000;
        }
        result.pp29_ = pp29_;
        if (((from_bitField1_ & 0x00008000) == 0x00008000)) {
          to_bitField1_ |= 0x00008000;
        }
        result.pp30_ = pp30_;
        if (((from_bitField1_ & 0x00010000) == 0x00010000)) {
          to_bitField1_ |= 0x00010000;
        }
        result.pp31_ = pp31_;
        if (((from_bitField1_ & 0x00020000) == 0x00020000)) {
          to_bitField1_ |= 0x00020000;
        }
        result.pp32_ = pp32_;
        if (((from_bitField1_ & 0x00040000) == 0x00040000)) {
          to_bitField1_ |= 0x00040000;
        }
        result.pp33_ = pp33_;
        if (((from_bitField1_ & 0x00080000) == 0x00080000)) {
          to_bitField1_ |= 0x00080000;
        }
        result.pp34_ = pp34_;
        if (((from_bitField1_ & 0x00100000) == 0x00100000)) {
          to_bitField1_ |= 0x00100000;
        }
        result.pp35_ = pp35_;
        if (((from_bitField1_ & 0x00200000) == 0x00200000)) {
          to_bitField1_ |= 0x00200000;
        }
        result.pp36_ = pp36_;
        if (((from_bitField1_ & 0x00400000) == 0x00400000)) {
          to_bitField1_ |= 0x00400000;
        }
        result.pc01_ = pc01_;
        if (((from_bitField1_ & 0x00800000) == 0x00800000)) {
          to_bitField1_ |= 0x00800000;
        }
        result.pc02_ = pc02_;
        if (((from_bitField1_ & 0x01000000) == 0x01000000)) {
          to_bitField1_ |= 0x01000000;
        }
        result.pc03_ = pc03_;
        if (((from_bitField1_ & 0x02000000) == 0x02000000)) {
          to_bitField1_ |= 0x02000000;
        }
        result.pc04_ = pc04_;
        if (((from_bitField1_ & 0x04000000) == 0x04000000)) {
          to_bitField1_ |= 0x04000000;
        }
        result.pc05_ = pc05_;
        if (((from_bitField1_ & 0x08000000) == 0x08000000)) {
          to_bitField1_ |= 0x08000000;
        }
        result.pc06_ = pc06_;
        if (((from_bitField1_ & 0x10000000) == 0x10000000)) {
          to_bitField1_ |= 0x10000000;
        }
        result.pc19_ = pc19_;
        if (((from_bitField1_ & 0x20000000) == 0x20000000)) {
          to_bitField1_ |= 0x20000000;
        }
        result.pc20_ = pc20_;
        if (((from_bitField1_ & 0x40000000) == 0x40000000)) {
          to_bitField1_ |= 0x40000000;
        }
        result.pc21_ = pc21_;
        if (((from_bitField1_ & 0x80000000) == 0x80000000)) {
          to_bitField1_ |= 0x80000000;
        }
        result.pc22_ = pc22_;
        if (((from_bitField2_ & 0x00000001) == 0x00000001)) {
          to_bitField2_ |= 0x00000001;
        }
        result.pc23_ = pc23_;
        if (((from_bitField2_ & 0x00000002) == 0x00000002)) {
          to_bitField2_ |= 0x00000002;
        }
        result.pc24_ = pc24_;
        result.bitField0_ = to_bitField0_;
        result.bitField1_ = to_bitField1_;
        result.bitField2_ = to_bitField2_;
        onBuilt();
        return result;
      }
      
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof debs.challenge.msg.CManufacturingMessages.CDataPoint) {
          return mergeFrom((debs.challenge.msg.CManufacturingMessages.CDataPoint)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }
      
      public Builder mergeFrom(debs.challenge.msg.CManufacturingMessages.CDataPoint other) {
        if (other == debs.challenge.msg.CManufacturingMessages.CDataPoint.getDefaultInstance()) return this;
        if (other.hasTs()) {
          setTs(other.getTs());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasMf01()) {
          setMf01(other.getMf01());
        }
        if (other.hasMf02()) {
          setMf02(other.getMf02());
        }
        if (other.hasMf03()) {
          setMf03(other.getMf03());
        }
        if (other.hasPc13()) {
          setPc13(other.getPc13());
        }
        if (other.hasPc14()) {
          setPc14(other.getPc14());
        }
        if (other.hasPc15()) {
          setPc15(other.getPc15());
        }
        if (other.hasPc25()) {
          setPc25(other.getPc25());
        }
        if (other.hasPc26()) {
          setPc26(other.getPc26());
        }
        if (other.hasPc27()) {
          setPc27(other.getPc27());
        }
        if (other.hasRes()) {
          setRes(other.getRes());
        }
        if (other.hasBm05()) {
          setBm05(other.getBm05());
        }
        if (other.hasBm06()) {
          setBm06(other.getBm06());
        }
        if (other.hasBm07()) {
          setBm07(other.getBm07());
        }
        if (other.hasBm08()) {
          setBm08(other.getBm08());
        }
        if (other.hasBm09()) {
          setBm09(other.getBm09());
        }
        if (other.hasBm10()) {
          setBm10(other.getBm10());
        }
        if (other.hasPp01()) {
          setPp01(other.getPp01());
        }
        if (other.hasPp02()) {
          setPp02(other.getPp02());
        }
        if (other.hasPp03()) {
          setPp03(other.getPp03());
        }
        if (other.hasPp04()) {
          setPp04(other.getPp04());
        }
        if (other.hasPp05()) {
          setPp05(other.getPp05());
        }
        if (other.hasPp06()) {
          setPp06(other.getPp06());
        }
        if (other.hasPp07()) {
          setPp07(other.getPp07());
        }
        if (other.hasPp08()) {
          setPp08(other.getPp08());
        }
        if (other.hasPp09()) {
          setPp09(other.getPp09());
        }
        if (other.hasPp10()) {
          setPp10(other.getPp10());
        }
        if (other.hasPp11()) {
          setPp11(other.getPp11());
        }
        if (other.hasPp12()) {
          setPp12(other.getPp12());
        }
        if (other.hasPp13()) {
          setPp13(other.getPp13());
        }
        if (other.hasPp14()) {
          setPp14(other.getPp14());
        }
        if (other.hasPp15()) {
          setPp15(other.getPp15());
        }
        if (other.hasPp16()) {
          setPp16(other.getPp16());
        }
        if (other.hasPp17()) {
          setPp17(other.getPp17());
        }
        if (other.hasPp18()) {
          setPp18(other.getPp18());
        }
        if (other.hasPp19()) {
          setPp19(other.getPp19());
        }
        if (other.hasPp20()) {
          setPp20(other.getPp20());
        }
        if (other.hasPp21()) {
          setPp21(other.getPp21());
        }
        if (other.hasPp22()) {
          setPp22(other.getPp22());
        }
        if (other.hasPp23()) {
          setPp23(other.getPp23());
        }
        if (other.hasPp24()) {
          setPp24(other.getPp24());
        }
        if (other.hasPp25()) {
          setPp25(other.getPp25());
        }
        if (other.hasPp26()) {
          setPp26(other.getPp26());
        }
        if (other.hasPp27()) {
          setPp27(other.getPp27());
        }
        if (other.hasPp28()) {
          setPp28(other.getPp28());
        }
        if (other.hasPp29()) {
          setPp29(other.getPp29());
        }
        if (other.hasPp30()) {
          setPp30(other.getPp30());
        }
        if (other.hasPp31()) {
          setPp31(other.getPp31());
        }
        if (other.hasPp32()) {
          setPp32(other.getPp32());
        }
        if (other.hasPp33()) {
          setPp33(other.getPp33());
        }
        if (other.hasPp34()) {
          setPp34(other.getPp34());
        }
        if (other.hasPp35()) {
          setPp35(other.getPp35());
        }
        if (other.hasPp36()) {
          setPp36(other.getPp36());
        }
        if (other.hasPc01()) {
          setPc01(other.getPc01());
        }
        if (other.hasPc02()) {
          setPc02(other.getPc02());
        }
        if (other.hasPc03()) {
          setPc03(other.getPc03());
        }
        if (other.hasPc04()) {
          setPc04(other.getPc04());
        }
        if (other.hasPc05()) {
          setPc05(other.getPc05());
        }
        if (other.hasPc06()) {
          setPc06(other.getPc06());
        }
        if (other.hasPc19()) {
          setPc19(other.getPc19());
        }
        if (other.hasPc20()) {
          setPc20(other.getPc20());
        }
        if (other.hasPc21()) {
          setPc21(other.getPc21());
        }
        if (other.hasPc22()) {
          setPc22(other.getPc22());
        }
        if (other.hasPc23()) {
          setPc23(other.getPc23());
        }
        if (other.hasPc24()) {
          setPc24(other.getPc24());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasTs()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        if (!hasMf01()) {
          
          return false;
        }
        if (!hasMf02()) {
          
          return false;
        }
        if (!hasMf03()) {
          
          return false;
        }
        if (!hasPc13()) {
          
          return false;
        }
        if (!hasPc14()) {
          
          return false;
        }
        if (!hasPc15()) {
          
          return false;
        }
        if (!hasPc25()) {
          
          return false;
        }
        if (!hasPc26()) {
          
          return false;
        }
        if (!hasPc27()) {
          
          return false;
        }
        if (!hasRes()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder(
            this.getUnknownFields());
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              this.setUnknownFields(unknownFields.build());
              onChanged();
              return this;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                this.setUnknownFields(unknownFields.build());
                onChanged();
                return this;
              }
              break;
            }
            case 9: {
              bitField0_ |= 0x00000001;
              ts_ = input.readFixed64();
              break;
            }
            case 17: {
              bitField0_ |= 0x00000002;
              index_ = input.readFixed64();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              mf01_ = input.readFixed32();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              mf02_ = input.readFixed32();
              break;
            }
            case 45: {
              bitField0_ |= 0x00000010;
              mf03_ = input.readFixed32();
              break;
            }
            case 53: {
              bitField0_ |= 0x00000020;
              pc13_ = input.readFixed32();
              break;
            }
            case 61: {
              bitField0_ |= 0x00000040;
              pc14_ = input.readFixed32();
              break;
            }
            case 69: {
              bitField0_ |= 0x00000080;
              pc15_ = input.readFixed32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              pc25_ = input.readUInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              pc26_ = input.readUInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              pc27_ = input.readUInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              res_ = input.readUInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00001000;
              bm05_ = input.readBool();
              break;
            }
            case 112: {
              bitField0_ |= 0x00002000;
              bm06_ = input.readBool();
              break;
            }
            case 120: {
              bitField0_ |= 0x00004000;
              bm07_ = input.readBool();
              break;
            }
            case 128: {
              bitField0_ |= 0x00008000;
              bm08_ = input.readBool();
              break;
            }
            case 136: {
              bitField0_ |= 0x00010000;
              bm09_ = input.readBool();
              break;
            }
            case 144: {
              bitField0_ |= 0x00020000;
              bm10_ = input.readBool();
              break;
            }
            case 152: {
              bitField0_ |= 0x00040000;
              pp01_ = input.readBool();
              break;
            }
            case 160: {
              bitField0_ |= 0x00080000;
              pp02_ = input.readBool();
              break;
            }
            case 168: {
              bitField0_ |= 0x00100000;
              pp03_ = input.readBool();
              break;
            }
            case 176: {
              bitField0_ |= 0x00200000;
              pp04_ = input.readBool();
              break;
            }
            case 184: {
              bitField0_ |= 0x00400000;
              pp05_ = input.readBool();
              break;
            }
            case 192: {
              bitField0_ |= 0x00800000;
              pp06_ = input.readBool();
              break;
            }
            case 200: {
              bitField0_ |= 0x01000000;
              pp07_ = input.readBool();
              break;
            }
            case 208: {
              bitField0_ |= 0x02000000;
              pp08_ = input.readBool();
              break;
            }
            case 216: {
              bitField0_ |= 0x04000000;
              pp09_ = input.readBool();
              break;
            }
            case 224: {
              bitField0_ |= 0x08000000;
              pp10_ = input.readBool();
              break;
            }
            case 232: {
              bitField0_ |= 0x10000000;
              pp11_ = input.readBool();
              break;
            }
            case 240: {
              bitField0_ |= 0x20000000;
              pp12_ = input.readBool();
              break;
            }
            case 248: {
              bitField0_ |= 0x40000000;
              pp13_ = input.readBool();
              break;
            }
            case 256: {
              bitField0_ |= 0x80000000;
              pp14_ = input.readBool();
              break;
            }
            case 264: {
              bitField1_ |= 0x00000001;
              pp15_ = input.readBool();
              break;
            }
            case 272: {
              bitField1_ |= 0x00000002;
              pp16_ = input.readBool();
              break;
            }
            case 280: {
              bitField1_ |= 0x00000004;
              pp17_ = input.readBool();
              break;
            }
            case 288: {
              bitField1_ |= 0x00000008;
              pp18_ = input.readBool();
              break;
            }
            case 296: {
              bitField1_ |= 0x00000010;
              pp19_ = input.readBool();
              break;
            }
            case 304: {
              bitField1_ |= 0x00000020;
              pp20_ = input.readBool();
              break;
            }
            case 312: {
              bitField1_ |= 0x00000040;
              pp21_ = input.readBool();
              break;
            }
            case 320: {
              bitField1_ |= 0x00000080;
              pp22_ = input.readBool();
              break;
            }
            case 328: {
              bitField1_ |= 0x00000100;
              pp23_ = input.readBool();
              break;
            }
            case 336: {
              bitField1_ |= 0x00000200;
              pp24_ = input.readBool();
              break;
            }
            case 344: {
              bitField1_ |= 0x00000400;
              pp25_ = input.readBool();
              break;
            }
            case 352: {
              bitField1_ |= 0x00000800;
              pp26_ = input.readBool();
              break;
            }
            case 360: {
              bitField1_ |= 0x00001000;
              pp27_ = input.readBool();
              break;
            }
            case 368: {
              bitField1_ |= 0x00002000;
              pp28_ = input.readBool();
              break;
            }
            case 376: {
              bitField1_ |= 0x00004000;
              pp29_ = input.readBool();
              break;
            }
            case 384: {
              bitField1_ |= 0x00008000;
              pp30_ = input.readBool();
              break;
            }
            case 392: {
              bitField1_ |= 0x00010000;
              pp31_ = input.readBool();
              break;
            }
            case 400: {
              bitField1_ |= 0x00020000;
              pp32_ = input.readBool();
              break;
            }
            case 408: {
              bitField1_ |= 0x00040000;
              pp33_ = input.readBool();
              break;
            }
            case 416: {
              bitField1_ |= 0x00080000;
              pp34_ = input.readBool();
              break;
            }
            case 424: {
              bitField1_ |= 0x00100000;
              pp35_ = input.readBool();
              break;
            }
            case 432: {
              bitField1_ |= 0x00200000;
              pp36_ = input.readBool();
              break;
            }
            case 440: {
              bitField1_ |= 0x00400000;
              pc01_ = input.readBool();
              break;
            }
            case 448: {
              bitField1_ |= 0x00800000;
              pc02_ = input.readBool();
              break;
            }
            case 456: {
              bitField1_ |= 0x01000000;
              pc03_ = input.readBool();
              break;
            }
            case 464: {
              bitField1_ |= 0x02000000;
              pc04_ = input.readBool();
              break;
            }
            case 472: {
              bitField1_ |= 0x04000000;
              pc05_ = input.readBool();
              break;
            }
            case 480: {
              bitField1_ |= 0x08000000;
              pc06_ = input.readBool();
              break;
            }
            case 488: {
              bitField1_ |= 0x10000000;
              pc19_ = input.readBool();
              break;
            }
            case 496: {
              bitField1_ |= 0x20000000;
              pc20_ = input.readBool();
              break;
            }
            case 504: {
              bitField1_ |= 0x40000000;
              pc21_ = input.readBool();
              break;
            }
            case 512: {
              bitField1_ |= 0x80000000;
              pc22_ = input.readBool();
              break;
            }
            case 520: {
              bitField2_ |= 0x00000001;
              pc23_ = input.readBool();
              break;
            }
            case 528: {
              bitField2_ |= 0x00000002;
              pc24_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      private int bitField1_;
      private int bitField2_;
      
      // required fixed64 ts = 1;
      private long ts_ ;
      public boolean hasTs() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public long getTs() {
        return ts_;
      }
      public Builder setTs(long value) {
        bitField0_ |= 0x00000001;
        ts_ = value;
        onChanged();
        return this;
      }
      public Builder clearTs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ts_ = 0L;
        onChanged();
        return this;
      }
      
      // required fixed64 index = 2;
      private long index_ ;
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public long getIndex() {
        return index_;
      }
      public Builder setIndex(long value) {
        bitField0_ |= 0x00000002;
        index_ = value;
        onChanged();
        return this;
      }
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0L;
        onChanged();
        return this;
      }
      
      // required fixed32 mf01 = 3;
      private int mf01_ ;
      public boolean hasMf01() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public int getMf01() {
        return mf01_;
      }
      public Builder setMf01(int value) {
        bitField0_ |= 0x00000004;
        mf01_ = value;
        onChanged();
        return this;
      }
      public Builder clearMf01() {
        bitField0_ = (bitField0_ & ~0x00000004);
        mf01_ = 0;
        onChanged();
        return this;
      }
      
      // required fixed32 mf02 = 4;
      private int mf02_ ;
      public boolean hasMf02() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public int getMf02() {
        return mf02_;
      }
      public Builder setMf02(int value) {
        bitField0_ |= 0x00000008;
        mf02_ = value;
        onChanged();
        return this;
      }
      public Builder clearMf02() {
        bitField0_ = (bitField0_ & ~0x00000008);
        mf02_ = 0;
        onChanged();
        return this;
      }
      
      // required fixed32 mf03 = 5;
      private int mf03_ ;
      public boolean hasMf03() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getMf03() {
        return mf03_;
      }
      public Builder setMf03(int value) {
        bitField0_ |= 0x00000010;
        mf03_ = value;
        onChanged();
        return this;
      }
      public Builder clearMf03() {
        bitField0_ = (bitField0_ & ~0x00000010);
        mf03_ = 0;
        onChanged();
        return this;
      }
      
      // required fixed32 pc13 = 6;
      private int pc13_ ;
      public boolean hasPc13() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getPc13() {
        return pc13_;
      }
      public Builder setPc13(int value) {
        bitField0_ |= 0x00000020;
        pc13_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc13() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pc13_ = 0;
        onChanged();
        return this;
      }
      
      // required fixed32 pc14 = 7;
      private int pc14_ ;
      public boolean hasPc14() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getPc14() {
        return pc14_;
      }
      public Builder setPc14(int value) {
        bitField0_ |= 0x00000040;
        pc14_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc14() {
        bitField0_ = (bitField0_ & ~0x00000040);
        pc14_ = 0;
        onChanged();
        return this;
      }
      
      // required fixed32 pc15 = 8;
      private int pc15_ ;
      public boolean hasPc15() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public int getPc15() {
        return pc15_;
      }
      public Builder setPc15(int value) {
        bitField0_ |= 0x00000080;
        pc15_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc15() {
        bitField0_ = (bitField0_ & ~0x00000080);
        pc15_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 pc25 = 9;
      private int pc25_ ;
      public boolean hasPc25() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      public int getPc25() {
        return pc25_;
      }
      public Builder setPc25(int value) {
        bitField0_ |= 0x00000100;
        pc25_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc25() {
        bitField0_ = (bitField0_ & ~0x00000100);
        pc25_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 pc26 = 10;
      private int pc26_ ;
      public boolean hasPc26() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      public int getPc26() {
        return pc26_;
      }
      public Builder setPc26(int value) {
        bitField0_ |= 0x00000200;
        pc26_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc26() {
        bitField0_ = (bitField0_ & ~0x00000200);
        pc26_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 pc27 = 11;
      private int pc27_ ;
      public boolean hasPc27() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      public int getPc27() {
        return pc27_;
      }
      public Builder setPc27(int value) {
        bitField0_ |= 0x00000400;
        pc27_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc27() {
        bitField0_ = (bitField0_ & ~0x00000400);
        pc27_ = 0;
        onChanged();
        return this;
      }
      
      // required uint32 res = 12;
      private int res_ ;
      public boolean hasRes() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      public int getRes() {
        return res_;
      }
      public Builder setRes(int value) {
        bitField0_ |= 0x00000800;
        res_ = value;
        onChanged();
        return this;
      }
      public Builder clearRes() {
        bitField0_ = (bitField0_ & ~0x00000800);
        res_ = 0;
        onChanged();
        return this;
      }
      
      // optional bool bm05 = 13;
      private boolean bm05_ ;
      public boolean hasBm05() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      public boolean getBm05() {
        return bm05_;
      }
      public Builder setBm05(boolean value) {
        bitField0_ |= 0x00001000;
        bm05_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm05() {
        bitField0_ = (bitField0_ & ~0x00001000);
        bm05_ = false;
        onChanged();
        return this;
      }
      
      // optional bool bm06 = 14;
      private boolean bm06_ ;
      public boolean hasBm06() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      public boolean getBm06() {
        return bm06_;
      }
      public Builder setBm06(boolean value) {
        bitField0_ |= 0x00002000;
        bm06_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm06() {
        bitField0_ = (bitField0_ & ~0x00002000);
        bm06_ = false;
        onChanged();
        return this;
      }
      
      // optional bool bm07 = 15;
      private boolean bm07_ ;
      public boolean hasBm07() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      public boolean getBm07() {
        return bm07_;
      }
      public Builder setBm07(boolean value) {
        bitField0_ |= 0x00004000;
        bm07_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm07() {
        bitField0_ = (bitField0_ & ~0x00004000);
        bm07_ = false;
        onChanged();
        return this;
      }
      
      // optional bool bm08 = 16;
      private boolean bm08_ ;
      public boolean hasBm08() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      public boolean getBm08() {
        return bm08_;
      }
      public Builder setBm08(boolean value) {
        bitField0_ |= 0x00008000;
        bm08_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm08() {
        bitField0_ = (bitField0_ & ~0x00008000);
        bm08_ = false;
        onChanged();
        return this;
      }
      
      // optional bool bm09 = 17;
      private boolean bm09_ ;
      public boolean hasBm09() {
        return ((bitField0_ & 0x00010000) == 0x00010000);
      }
      public boolean getBm09() {
        return bm09_;
      }
      public Builder setBm09(boolean value) {
        bitField0_ |= 0x00010000;
        bm09_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm09() {
        bitField0_ = (bitField0_ & ~0x00010000);
        bm09_ = false;
        onChanged();
        return this;
      }
      
      // optional bool bm10 = 18;
      private boolean bm10_ ;
      public boolean hasBm10() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      public boolean getBm10() {
        return bm10_;
      }
      public Builder setBm10(boolean value) {
        bitField0_ |= 0x00020000;
        bm10_ = value;
        onChanged();
        return this;
      }
      public Builder clearBm10() {
        bitField0_ = (bitField0_ & ~0x00020000);
        bm10_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp01 = 19;
      private boolean pp01_ ;
      public boolean hasPp01() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      public boolean getPp01() {
        return pp01_;
      }
      public Builder setPp01(boolean value) {
        bitField0_ |= 0x00040000;
        pp01_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp01() {
        bitField0_ = (bitField0_ & ~0x00040000);
        pp01_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp02 = 20;
      private boolean pp02_ ;
      public boolean hasPp02() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      public boolean getPp02() {
        return pp02_;
      }
      public Builder setPp02(boolean value) {
        bitField0_ |= 0x00080000;
        pp02_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp02() {
        bitField0_ = (bitField0_ & ~0x00080000);
        pp02_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp03 = 21;
      private boolean pp03_ ;
      public boolean hasPp03() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      public boolean getPp03() {
        return pp03_;
      }
      public Builder setPp03(boolean value) {
        bitField0_ |= 0x00100000;
        pp03_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp03() {
        bitField0_ = (bitField0_ & ~0x00100000);
        pp03_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp04 = 22;
      private boolean pp04_ ;
      public boolean hasPp04() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      public boolean getPp04() {
        return pp04_;
      }
      public Builder setPp04(boolean value) {
        bitField0_ |= 0x00200000;
        pp04_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp04() {
        bitField0_ = (bitField0_ & ~0x00200000);
        pp04_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp05 = 23;
      private boolean pp05_ ;
      public boolean hasPp05() {
        return ((bitField0_ & 0x00400000) == 0x00400000);
      }
      public boolean getPp05() {
        return pp05_;
      }
      public Builder setPp05(boolean value) {
        bitField0_ |= 0x00400000;
        pp05_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp05() {
        bitField0_ = (bitField0_ & ~0x00400000);
        pp05_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp06 = 24;
      private boolean pp06_ ;
      public boolean hasPp06() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      public boolean getPp06() {
        return pp06_;
      }
      public Builder setPp06(boolean value) {
        bitField0_ |= 0x00800000;
        pp06_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp06() {
        bitField0_ = (bitField0_ & ~0x00800000);
        pp06_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp07 = 25;
      private boolean pp07_ ;
      public boolean hasPp07() {
        return ((bitField0_ & 0x01000000) == 0x01000000);
      }
      public boolean getPp07() {
        return pp07_;
      }
      public Builder setPp07(boolean value) {
        bitField0_ |= 0x01000000;
        pp07_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp07() {
        bitField0_ = (bitField0_ & ~0x01000000);
        pp07_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp08 = 26;
      private boolean pp08_ ;
      public boolean hasPp08() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      public boolean getPp08() {
        return pp08_;
      }
      public Builder setPp08(boolean value) {
        bitField0_ |= 0x02000000;
        pp08_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp08() {
        bitField0_ = (bitField0_ & ~0x02000000);
        pp08_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp09 = 27;
      private boolean pp09_ ;
      public boolean hasPp09() {
        return ((bitField0_ & 0x04000000) == 0x04000000);
      }
      public boolean getPp09() {
        return pp09_;
      }
      public Builder setPp09(boolean value) {
        bitField0_ |= 0x04000000;
        pp09_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp09() {
        bitField0_ = (bitField0_ & ~0x04000000);
        pp09_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp10 = 28;
      private boolean pp10_ ;
      public boolean hasPp10() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      public boolean getPp10() {
        return pp10_;
      }
      public Builder setPp10(boolean value) {
        bitField0_ |= 0x08000000;
        pp10_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp10() {
        bitField0_ = (bitField0_ & ~0x08000000);
        pp10_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp11 = 29;
      private boolean pp11_ ;
      public boolean hasPp11() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      public boolean getPp11() {
        return pp11_;
      }
      public Builder setPp11(boolean value) {
        bitField0_ |= 0x10000000;
        pp11_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp11() {
        bitField0_ = (bitField0_ & ~0x10000000);
        pp11_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp12 = 30;
      private boolean pp12_ ;
      public boolean hasPp12() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      public boolean getPp12() {
        return pp12_;
      }
      public Builder setPp12(boolean value) {
        bitField0_ |= 0x20000000;
        pp12_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp12() {
        bitField0_ = (bitField0_ & ~0x20000000);
        pp12_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp13 = 31;
      private boolean pp13_ ;
      public boolean hasPp13() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      public boolean getPp13() {
        return pp13_;
      }
      public Builder setPp13(boolean value) {
        bitField0_ |= 0x40000000;
        pp13_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp13() {
        bitField0_ = (bitField0_ & ~0x40000000);
        pp13_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp14 = 32;
      private boolean pp14_ ;
      public boolean hasPp14() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      public boolean getPp14() {
        return pp14_;
      }
      public Builder setPp14(boolean value) {
        bitField0_ |= 0x80000000;
        pp14_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp14() {
        bitField0_ = (bitField0_ & ~0x80000000);
        pp14_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp15 = 33;
      private boolean pp15_ ;
      public boolean hasPp15() {
        return ((bitField1_ & 0x00000001) == 0x00000001);
      }
      public boolean getPp15() {
        return pp15_;
      }
      public Builder setPp15(boolean value) {
        bitField1_ |= 0x00000001;
        pp15_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp15() {
        bitField1_ = (bitField1_ & ~0x00000001);
        pp15_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp16 = 34;
      private boolean pp16_ ;
      public boolean hasPp16() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      public boolean getPp16() {
        return pp16_;
      }
      public Builder setPp16(boolean value) {
        bitField1_ |= 0x00000002;
        pp16_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp16() {
        bitField1_ = (bitField1_ & ~0x00000002);
        pp16_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp17 = 35;
      private boolean pp17_ ;
      public boolean hasPp17() {
        return ((bitField1_ & 0x00000004) == 0x00000004);
      }
      public boolean getPp17() {
        return pp17_;
      }
      public Builder setPp17(boolean value) {
        bitField1_ |= 0x00000004;
        pp17_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp17() {
        bitField1_ = (bitField1_ & ~0x00000004);
        pp17_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp18 = 36;
      private boolean pp18_ ;
      public boolean hasPp18() {
        return ((bitField1_ & 0x00000008) == 0x00000008);
      }
      public boolean getPp18() {
        return pp18_;
      }
      public Builder setPp18(boolean value) {
        bitField1_ |= 0x00000008;
        pp18_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp18() {
        bitField1_ = (bitField1_ & ~0x00000008);
        pp18_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp19 = 37;
      private boolean pp19_ ;
      public boolean hasPp19() {
        return ((bitField1_ & 0x00000010) == 0x00000010);
      }
      public boolean getPp19() {
        return pp19_;
      }
      public Builder setPp19(boolean value) {
        bitField1_ |= 0x00000010;
        pp19_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp19() {
        bitField1_ = (bitField1_ & ~0x00000010);
        pp19_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp20 = 38;
      private boolean pp20_ ;
      public boolean hasPp20() {
        return ((bitField1_ & 0x00000020) == 0x00000020);
      }
      public boolean getPp20() {
        return pp20_;
      }
      public Builder setPp20(boolean value) {
        bitField1_ |= 0x00000020;
        pp20_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp20() {
        bitField1_ = (bitField1_ & ~0x00000020);
        pp20_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp21 = 39;
      private boolean pp21_ ;
      public boolean hasPp21() {
        return ((bitField1_ & 0x00000040) == 0x00000040);
      }
      public boolean getPp21() {
        return pp21_;
      }
      public Builder setPp21(boolean value) {
        bitField1_ |= 0x00000040;
        pp21_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp21() {
        bitField1_ = (bitField1_ & ~0x00000040);
        pp21_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp22 = 40;
      private boolean pp22_ ;
      public boolean hasPp22() {
        return ((bitField1_ & 0x00000080) == 0x00000080);
      }
      public boolean getPp22() {
        return pp22_;
      }
      public Builder setPp22(boolean value) {
        bitField1_ |= 0x00000080;
        pp22_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp22() {
        bitField1_ = (bitField1_ & ~0x00000080);
        pp22_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp23 = 41;
      private boolean pp23_ ;
      public boolean hasPp23() {
        return ((bitField1_ & 0x00000100) == 0x00000100);
      }
      public boolean getPp23() {
        return pp23_;
      }
      public Builder setPp23(boolean value) {
        bitField1_ |= 0x00000100;
        pp23_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp23() {
        bitField1_ = (bitField1_ & ~0x00000100);
        pp23_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp24 = 42;
      private boolean pp24_ ;
      public boolean hasPp24() {
        return ((bitField1_ & 0x00000200) == 0x00000200);
      }
      public boolean getPp24() {
        return pp24_;
      }
      public Builder setPp24(boolean value) {
        bitField1_ |= 0x00000200;
        pp24_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp24() {
        bitField1_ = (bitField1_ & ~0x00000200);
        pp24_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp25 = 43;
      private boolean pp25_ ;
      public boolean hasPp25() {
        return ((bitField1_ & 0x00000400) == 0x00000400);
      }
      public boolean getPp25() {
        return pp25_;
      }
      public Builder setPp25(boolean value) {
        bitField1_ |= 0x00000400;
        pp25_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp25() {
        bitField1_ = (bitField1_ & ~0x00000400);
        pp25_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp26 = 44;
      private boolean pp26_ ;
      public boolean hasPp26() {
        return ((bitField1_ & 0x00000800) == 0x00000800);
      }
      public boolean getPp26() {
        return pp26_;
      }
      public Builder setPp26(boolean value) {
        bitField1_ |= 0x00000800;
        pp26_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp26() {
        bitField1_ = (bitField1_ & ~0x00000800);
        pp26_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp27 = 45;
      private boolean pp27_ ;
      public boolean hasPp27() {
        return ((bitField1_ & 0x00001000) == 0x00001000);
      }
      public boolean getPp27() {
        return pp27_;
      }
      public Builder setPp27(boolean value) {
        bitField1_ |= 0x00001000;
        pp27_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp27() {
        bitField1_ = (bitField1_ & ~0x00001000);
        pp27_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp28 = 46;
      private boolean pp28_ ;
      public boolean hasPp28() {
        return ((bitField1_ & 0x00002000) == 0x00002000);
      }
      public boolean getPp28() {
        return pp28_;
      }
      public Builder setPp28(boolean value) {
        bitField1_ |= 0x00002000;
        pp28_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp28() {
        bitField1_ = (bitField1_ & ~0x00002000);
        pp28_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp29 = 47;
      private boolean pp29_ ;
      public boolean hasPp29() {
        return ((bitField1_ & 0x00004000) == 0x00004000);
      }
      public boolean getPp29() {
        return pp29_;
      }
      public Builder setPp29(boolean value) {
        bitField1_ |= 0x00004000;
        pp29_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp29() {
        bitField1_ = (bitField1_ & ~0x00004000);
        pp29_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp30 = 48;
      private boolean pp30_ ;
      public boolean hasPp30() {
        return ((bitField1_ & 0x00008000) == 0x00008000);
      }
      public boolean getPp30() {
        return pp30_;
      }
      public Builder setPp30(boolean value) {
        bitField1_ |= 0x00008000;
        pp30_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp30() {
        bitField1_ = (bitField1_ & ~0x00008000);
        pp30_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp31 = 49;
      private boolean pp31_ ;
      public boolean hasPp31() {
        return ((bitField1_ & 0x00010000) == 0x00010000);
      }
      public boolean getPp31() {
        return pp31_;
      }
      public Builder setPp31(boolean value) {
        bitField1_ |= 0x00010000;
        pp31_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp31() {
        bitField1_ = (bitField1_ & ~0x00010000);
        pp31_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp32 = 50;
      private boolean pp32_ ;
      public boolean hasPp32() {
        return ((bitField1_ & 0x00020000) == 0x00020000);
      }
      public boolean getPp32() {
        return pp32_;
      }
      public Builder setPp32(boolean value) {
        bitField1_ |= 0x00020000;
        pp32_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp32() {
        bitField1_ = (bitField1_ & ~0x00020000);
        pp32_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp33 = 51;
      private boolean pp33_ ;
      public boolean hasPp33() {
        return ((bitField1_ & 0x00040000) == 0x00040000);
      }
      public boolean getPp33() {
        return pp33_;
      }
      public Builder setPp33(boolean value) {
        bitField1_ |= 0x00040000;
        pp33_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp33() {
        bitField1_ = (bitField1_ & ~0x00040000);
        pp33_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp34 = 52;
      private boolean pp34_ ;
      public boolean hasPp34() {
        return ((bitField1_ & 0x00080000) == 0x00080000);
      }
      public boolean getPp34() {
        return pp34_;
      }
      public Builder setPp34(boolean value) {
        bitField1_ |= 0x00080000;
        pp34_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp34() {
        bitField1_ = (bitField1_ & ~0x00080000);
        pp34_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp35 = 53;
      private boolean pp35_ ;
      public boolean hasPp35() {
        return ((bitField1_ & 0x00100000) == 0x00100000);
      }
      public boolean getPp35() {
        return pp35_;
      }
      public Builder setPp35(boolean value) {
        bitField1_ |= 0x00100000;
        pp35_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp35() {
        bitField1_ = (bitField1_ & ~0x00100000);
        pp35_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pp36 = 54;
      private boolean pp36_ ;
      public boolean hasPp36() {
        return ((bitField1_ & 0x00200000) == 0x00200000);
      }
      public boolean getPp36() {
        return pp36_;
      }
      public Builder setPp36(boolean value) {
        bitField1_ |= 0x00200000;
        pp36_ = value;
        onChanged();
        return this;
      }
      public Builder clearPp36() {
        bitField1_ = (bitField1_ & ~0x00200000);
        pp36_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc01 = 55;
      private boolean pc01_ ;
      public boolean hasPc01() {
        return ((bitField1_ & 0x00400000) == 0x00400000);
      }
      public boolean getPc01() {
        return pc01_;
      }
      public Builder setPc01(boolean value) {
        bitField1_ |= 0x00400000;
        pc01_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc01() {
        bitField1_ = (bitField1_ & ~0x00400000);
        pc01_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc02 = 56;
      private boolean pc02_ ;
      public boolean hasPc02() {
        return ((bitField1_ & 0x00800000) == 0x00800000);
      }
      public boolean getPc02() {
        return pc02_;
      }
      public Builder setPc02(boolean value) {
        bitField1_ |= 0x00800000;
        pc02_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc02() {
        bitField1_ = (bitField1_ & ~0x00800000);
        pc02_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc03 = 57;
      private boolean pc03_ ;
      public boolean hasPc03() {
        return ((bitField1_ & 0x01000000) == 0x01000000);
      }
      public boolean getPc03() {
        return pc03_;
      }
      public Builder setPc03(boolean value) {
        bitField1_ |= 0x01000000;
        pc03_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc03() {
        bitField1_ = (bitField1_ & ~0x01000000);
        pc03_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc04 = 58;
      private boolean pc04_ ;
      public boolean hasPc04() {
        return ((bitField1_ & 0x02000000) == 0x02000000);
      }
      public boolean getPc04() {
        return pc04_;
      }
      public Builder setPc04(boolean value) {
        bitField1_ |= 0x02000000;
        pc04_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc04() {
        bitField1_ = (bitField1_ & ~0x02000000);
        pc04_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc05 = 59;
      private boolean pc05_ ;
      public boolean hasPc05() {
        return ((bitField1_ & 0x04000000) == 0x04000000);
      }
      public boolean getPc05() {
        return pc05_;
      }
      public Builder setPc05(boolean value) {
        bitField1_ |= 0x04000000;
        pc05_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc05() {
        bitField1_ = (bitField1_ & ~0x04000000);
        pc05_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc06 = 60;
      private boolean pc06_ ;
      public boolean hasPc06() {
        return ((bitField1_ & 0x08000000) == 0x08000000);
      }
      public boolean getPc06() {
        return pc06_;
      }
      public Builder setPc06(boolean value) {
        bitField1_ |= 0x08000000;
        pc06_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc06() {
        bitField1_ = (bitField1_ & ~0x08000000);
        pc06_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc19 = 61;
      private boolean pc19_ ;
      public boolean hasPc19() {
        return ((bitField1_ & 0x10000000) == 0x10000000);
      }
      public boolean getPc19() {
        return pc19_;
      }
      public Builder setPc19(boolean value) {
        bitField1_ |= 0x10000000;
        pc19_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc19() {
        bitField1_ = (bitField1_ & ~0x10000000);
        pc19_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc20 = 62;
      private boolean pc20_ ;
      public boolean hasPc20() {
        return ((bitField1_ & 0x20000000) == 0x20000000);
      }
      public boolean getPc20() {
        return pc20_;
      }
      public Builder setPc20(boolean value) {
        bitField1_ |= 0x20000000;
        pc20_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc20() {
        bitField1_ = (bitField1_ & ~0x20000000);
        pc20_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc21 = 63;
      private boolean pc21_ ;
      public boolean hasPc21() {
        return ((bitField1_ & 0x40000000) == 0x40000000);
      }
      public boolean getPc21() {
        return pc21_;
      }
      public Builder setPc21(boolean value) {
        bitField1_ |= 0x40000000;
        pc21_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc21() {
        bitField1_ = (bitField1_ & ~0x40000000);
        pc21_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc22 = 64;
      private boolean pc22_ ;
      public boolean hasPc22() {
        return ((bitField1_ & 0x80000000) == 0x80000000);
      }
      public boolean getPc22() {
        return pc22_;
      }
      public Builder setPc22(boolean value) {
        bitField1_ |= 0x80000000;
        pc22_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc22() {
        bitField1_ = (bitField1_ & ~0x80000000);
        pc22_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc23 = 65;
      private boolean pc23_ ;
      public boolean hasPc23() {
        return ((bitField2_ & 0x00000001) == 0x00000001);
      }
      public boolean getPc23() {
        return pc23_;
      }
      public Builder setPc23(boolean value) {
        bitField2_ |= 0x00000001;
        pc23_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc23() {
        bitField2_ = (bitField2_ & ~0x00000001);
        pc23_ = false;
        onChanged();
        return this;
      }
      
      // optional bool pc24 = 66;
      private boolean pc24_ ;
      public boolean hasPc24() {
        return ((bitField2_ & 0x00000002) == 0x00000002);
      }
      public boolean getPc24() {
        return pc24_;
      }
      public Builder setPc24(boolean value) {
        bitField2_ |= 0x00000002;
        pc24_ = value;
        onChanged();
        return this;
      }
      public Builder clearPc24() {
        bitField2_ = (bitField2_ & ~0x00000002);
        pc24_ = false;
        onChanged();
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:debs.challenge.msg.CDataPoint)
    }
    
    static {
      defaultInstance = new CDataPoint(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:debs.challenge.msg.CDataPoint)
  }
  
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_debs_challenge_msg_CDataPoint_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_debs_challenge_msg_CDataPoint_fieldAccessorTable;
  
  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n3src/debs/challenge/msg/CManufacturingM" +
      "essages.proto\022\022debs.challenge.msg\"\246\007\n\nCD" +
      "ataPoint\022\n\n\002ts\030\001 \002(\006\022\r\n\005index\030\002 \002(\006\022\014\n\004m" +
      "f01\030\003 \002(\007\022\014\n\004mf02\030\004 \002(\007\022\014\n\004mf03\030\005 \002(\007\022\014\n" +
      "\004pc13\030\006 \002(\007\022\014\n\004pc14\030\007 \002(\007\022\014\n\004pc15\030\010 \002(\007\022" +
      "\014\n\004pc25\030\t \002(\r\022\014\n\004pc26\030\n \002(\r\022\014\n\004pc27\030\013 \002(" +
      "\r\022\013\n\003res\030\014 \002(\r\022\014\n\004bm05\030\r \001(\010\022\014\n\004bm06\030\016 \001" +
      "(\010\022\014\n\004bm07\030\017 \001(\010\022\014\n\004bm08\030\020 \001(\010\022\014\n\004bm09\030\021" +
      " \001(\010\022\014\n\004bm10\030\022 \001(\010\022\014\n\004pp01\030\023 \001(\010\022\014\n\004pp02" +
      "\030\024 \001(\010\022\014\n\004pp03\030\025 \001(\010\022\014\n\004pp04\030\026 \001(\010\022\014\n\004pp",
      "05\030\027 \001(\010\022\014\n\004pp06\030\030 \001(\010\022\014\n\004pp07\030\031 \001(\010\022\014\n\004" +
      "pp08\030\032 \001(\010\022\014\n\004pp09\030\033 \001(\010\022\014\n\004pp10\030\034 \001(\010\022\014" +
      "\n\004pp11\030\035 \001(\010\022\014\n\004pp12\030\036 \001(\010\022\014\n\004pp13\030\037 \001(\010" +
      "\022\014\n\004pp14\030  \001(\010\022\014\n\004pp15\030! \001(\010\022\014\n\004pp16\030\" \001" +
      "(\010\022\014\n\004pp17\030# \001(\010\022\014\n\004pp18\030$ \001(\010\022\014\n\004pp19\030%" +
      " \001(\010\022\014\n\004pp20\030& \001(\010\022\014\n\004pp21\030\' \001(\010\022\014\n\004pp22" +
      "\030( \001(\010\022\014\n\004pp23\030) \001(\010\022\014\n\004pp24\030* \001(\010\022\014\n\004pp" +
      "25\030+ \001(\010\022\014\n\004pp26\030, \001(\010\022\014\n\004pp27\030- \001(\010\022\014\n\004" +
      "pp28\030. \001(\010\022\014\n\004pp29\030/ \001(\010\022\014\n\004pp30\0300 \001(\010\022\014" +
      "\n\004pp31\0301 \001(\010\022\014\n\004pp32\0302 \001(\010\022\014\n\004pp33\0303 \001(\010",
      "\022\014\n\004pp34\0304 \001(\010\022\014\n\004pp35\0305 \001(\010\022\014\n\004pp36\0306 \001" +
      "(\010\022\014\n\004pc01\0307 \001(\010\022\014\n\004pc02\0308 \001(\010\022\014\n\004pc03\0309" +
      " \001(\010\022\014\n\004pc04\030: \001(\010\022\014\n\004pc05\030; \001(\010\022\014\n\004pc06" +
      "\030< \001(\010\022\014\n\004pc19\030= \001(\010\022\014\n\004pc20\030> \001(\010\022\014\n\004pc" +
      "21\030? \001(\010\022\014\n\004pc22\030@ \001(\010\022\014\n\004pc23\030A \001(\010\022\014\n\004" +
      "pc24\030B \001(\010B\032B\026CManufacturingMessagesH\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_debs_challenge_msg_CDataPoint_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_debs_challenge_msg_CDataPoint_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_debs_challenge_msg_CDataPoint_descriptor,
              new java.lang.String[] { "Ts", "Index", "Mf01", "Mf02", "Mf03", "Pc13", "Pc14", "Pc15", "Pc25", "Pc26", "Pc27", "Res", "Bm05", "Bm06", "Bm07", "Bm08", "Bm09", "Bm10", "Pp01", "Pp02", "Pp03", "Pp04", "Pp05", "Pp06", "Pp07", "Pp08", "Pp09", "Pp10", "Pp11", "Pp12", "Pp13", "Pp14", "Pp15", "Pp16", "Pp17", "Pp18", "Pp19", "Pp20", "Pp21", "Pp22", "Pp23", "Pp24", "Pp25", "Pp26", "Pp27", "Pp28", "Pp29", "Pp30", "Pp31", "Pp32", "Pp33", "Pp34", "Pp35", "Pp36", "Pc01", "Pc02", "Pc03", "Pc04", "Pc05", "Pc06", "Pc19", "Pc20", "Pc21", "Pc22", "Pc23", "Pc24", },
              debs.challenge.msg.CManufacturingMessages.CDataPoint.class,
              debs.challenge.msg.CManufacturingMessages.CDataPoint.Builder.class);
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
